************************ Exercise 1 ************************
Input: Number represting number of switches
Output: Array representing which switches are on after count number of passes (count number of passes = number of switches)
Rules:
  -Switch names begin with 1 and end with count
  -Round 1: Flip every switch.
  -Round 2: Flip every other switch (so that even numbered lights are off)
  -Round 3: Flip every 3rd switch
  -etc.
Algorithm:
  -Initialize an array of sub-arrays. The first number in each sub-array is the switch number; the second is a boolean representing
    whether the switch is on or off (i.e, [[1, false], [2, false], [3, false])
  -Initialize a loop that exits after count iterations
    -During each iteration, flip every switch whose index is divisible by whatever value represents the current iteration
  -Filter the array so that only the switch numbers of the switches that are left on are left
  -Return the filtered array
  
************************ Exercise 2 ************************
Input: Odd integer
Output: Diamond that is made of stars
Rules:
  -The widest point of the diamond should be input *'s wide
  -The first line of the diamond should be one star wide
  -Subsequent lines of the diamond should be 2 stars wider until reaching the widest point
  -Spaces = Math.floor(widestpoint / 2)

FURTHER EXPLORATION:
Algorithm:
  -first and last star stay stars; remaining stars become spaces

************************ Exercise 3 ************************
Input: word
Output: true or false, depending on whether word can be spelled with given blocks
Rules:
  -word can only be spelled with blocks if no two of its letters appear on the same blocks
  -word blocks:
    B:O   X:K   D:Q   C:P   N:A
    G:T   R:E   F:S   J:W   H:U
    V:I   L:Y   Z:M
  -words are case insensitive
Algorithm:
  -initialize a word blocks array. Within the array, add each pair of words in a sub array.
  -loop through the letters in the word
    -if letter is located within array, continue; if not, return 'false'
    -remove sub-array containing letter from the array
  -return true
 
************************ Exercise 4 ************************
Input: Odd number representing grid size (i.e., 9 = 9x9 grid)
Output: 8-pointed star displayed on that grid
Rules:
    -Validate input?
    -Smallest grid size is 7x7
    -Star pattern (7x7 grid):
        *  *  *     Always 3 stars w/2 spaces between them
         * * *      Always 3 stars w/1 space between them
          ***       Always 3 stars w/no spaces btwn them
        *******     Widest part of star = to grid width
          ***       Always 3 stars w/no spaces btwn them
         * * *      Always 3 stars w/1 space between them
        *  *  *     Always 3 stars w/2 spaces between them
    -Star pattern (9x9 grid)
        *   *   *
         *  *  *
          * * *
           ***
        *********
           ***
          * * *
         *  *  *
        *   *   
Algorithm (Star formula);
        Line 1: y*x*x*; y (represents outer spaces) = 0; x (represents inner spaces) = grid size - 3 / 2
        Line 2: y*x*x*; y  = y + 1; x = x (from Line 1) - 1
        Line 3: y*x*x*; y = y + 1; x = x (from Line 2) - 1
        ...continue until x = 0
        Center Line: stars printed grid # of times (no spaces)
        Next line: y*x*x*; y = grid size - 3 / 2; x = 0;
        Next line: y = y (from previous line) + 1; x = x (from prev line) + 1
        ...continue until y = 0;
        
Algorithm (Algorithm):
    -Print top half of star
        -Initialize outerSpaces variable and set to 0
        -Initialize innerSpaces variable and set to (grid size - 3) / 2
        -Initialize a do/while loop; the stopping condition is innerSpaces = 0;
            -During each iteration:
                -Print y*x*x* (where y = " ".repeat(outerSpaces) and x = " ".repeat(innerSpaces);
                -Increase outerSpaces by 1
                -Decrease innerSpaces by 1
    -Print center of star
        -Print gridSize number of stars
    -Print bottom half of star
        -Same procedure as printing top half of star, except following:
            -Initialize outerSpaces variable to (grid size - 3) / 2
            -Initialize innerSpaces variable to 0
            -During each iteration
                -Decrease outerSpaces by 1
                -Increase innerSpaces
    