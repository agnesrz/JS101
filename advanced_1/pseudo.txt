************** Exercise 2 **************
Input: array of nested arrays that represent a 3x3 matrix
Output: the transpose of the matrix
Rules: 
  -Don't modify the original array
Examples/test cases:
  -here's a matrix:
    1  5  8
    4  7  2
    3  9  6
  -here's the transpose of the matrix
    1  4  3
    5  7  9
    8  2  6

Algorithm:
  -Take the first value from each sub-array to create the first sub-array of the transposed matrix
  -Take the second  value... to create the second sub-array...
  -Take the third value... to create the third sub-array...

************** Exercise 4 **************

Top First   => Top Last
Top Mid     => Mid Last
Top Last    => Last Last

Mid First   => First Mid
Mid Mid     => Mid Mid
Mid Last    => Bottom Mid

Bottom First=> Top First        
Bottom Mid  => Mid First
Bottom Last => Bottom First

Column 0, Row 0 =>  Column 2, Row 0
Column 1, Row 0 =>  Column 2, Row 1
Column 2, Row 0 =>  Column 2, Row 2

Column 0, Row 1 =>  Column 1, Row 0
Column 1, Row 1 =>  Column 1, Row 1
Column 2, Row 1 =>  Column 1, Row 2

Column 0, Row 2 =>  Column 0, Row 0
Column 1, Row 2 =>  Column 0, Row 1
Column 2, Row 2 =>  Column 0, Row 2

****** the above rearranged
Column 0, Row 0 => Column 0, Row 2
Column 0, Row 1 => Column 1, Row 2
Column 0, Row 2 => Column 2, Row 2

Column 1, Row 0 => Column 0, Row 1
Column 1, Row 1 => Column 1, Row 1
Column 1, Row 2 => Column 2, Row 1

Column 2, Row 0 => Column 0, Row 0
Column 2, Row 1 => Column 1, Row 0
Column 2, Row 2 => Column 2, Row 0

or 

Column 0, Row 0 => Column 0, Row 2
Column 1, Row 0 => Column 0, Row 1
Column 2, Row 0 => Column 0, Row 0

Column 0, Row 1 => Column 1, Row 2
Column 1, Row 1 => Column 1, Row 1
Column 2, Row 1 => Column 1, Row 0

Column 0, Row 2 => Column 2, Row 2
Column 1, Row 2 => Column 2, Row 1
Column 2, Row 2 => Column 2, Row 0

************** Exercise 5 **************
Assignment: Write a function that takes two sorted arrays as arguments,
            and returns a new array that contains all the elements from
            both input arrays in sorted order.


Input: Two sorted arrays
Output: A single array consisting of the values in both arrays sorted in order
Rules:
    -Do not use the sort method
    -Do not mutate the input array
Algorithm:
    -Initialize a variable "result" with an empty array
    -Create a loop
    -Initialize a variable "firstArrayIndex" with the value 0
    -Initialize a variable "secondArrayIndex" with the value 0
    -Create a while loop. Within the loop:
        -Check that the value in the firstArrayIndex and secondArrayIndex variables are less than the length of their corrosponding arrays
            -If the value in one of the variables is not less, push the value in the other variable and 'continue' with next loop iteration
            -If the value of both of the variables is not less, break out of the loop
        -Check which value is smaller: the one at firstArrayIndex or secondArrayIndex
        -Push that value to "result"
        -Increment the corrosponding variable by 1 (firstArrayIndex or secondArrayIndex)
    -Return value in result variable

************** Exercise 6 **************
Assignment: Write a function that takes an array, and returns a new array that contains the values from the input array in sorted order. 

Input: Array
Output: Array, sorted
Rules: 
    -Assume array consists of all numbers or strings
    -Use function build in previous exercise
    -Sort using merge sort algorithm
        [9, 5, 7, 1] -->
        [[9, 5], [7, 1]] -->
        [[[9], [5]], [[7], [1]]] -->
        [[5, 9], [1, 7]] -->
        [1, 5, 7, 9]
Algorithm:
    -Divide the elemnts in the array into nested arrays, each containing two elements
        -Handle case where odd number of elements
    -Divide the elements in each sub-array so that each is nested one level deeper in its own sub-array
    -Compare the elements in the first two arrays, and return a single array in which the elements are sorted in order
    -Compare the elements in this new array to the elements in the third array, and return a single array in which ''
    -Continue the comparing the result array to the next array and returning a single array until there are no arrays left to compare
    -Return the result
   
************** Exercise 7 ************** 
Input: array, search item
Output: array index at which search item is found or -1 if it is not found in the array
Rules:
  -use binary search method to find item
  -array will be sorted in alphabetical order
Algorithm:
  1. Intialize variables:
    -startIndex = 0
    -endIndex = length of array
    -middleIndex;
  2. Enter a while loop, where the continuation condition is "true"
  3. Retrieve middle value of data
    -create getMiddleIndex function that determines the middle value of data
  4. Evaluate middle value:
    a. If the middle value is equal to the search item, return middleIndex
    b. If the startIndex and the endIndex are the same, return -1
    c. If the middle value is less than the search item, discard middle value and the bottom half of items
    d. If the middle value is more than the search item, discard the middle value and upper half
    
  SUBPROCESS - getMiddleIndex() function
    -calcuate the length of array - startIndex / 2; use Math.floor() to account for odd numbers
    -middleIndex = result of previous calculation added to start index
  SUBPROCESS - STEP 4c
    -reset end index to middleIndex -1
    -calculate middleIndex
  SUBPROCESS - STEP 4d
    -reset start index to middleIndex + 
    -calculate middleIndex
  
************** Exercise 8A ************** 
Input: Rational number
Output: Array containing all the denominators that are part of an Egyptian Fraction representation of the number
Rules: 
    -A Rational Number is any number that can be represented as the result of the division between two integers,
     e.g., 1/3, 3/2, 22/7, etc. The number to the left is called the numerator, and the number to the right
     is called the denominator.
    -A Unit Fraction is a rational number where the numerator is 1.
    -An Egyptian Fraction is the sum of a series of distinct unit fractions (no two are the same), such as:
        1   1    1    1
        - + - + -- + --
        2   3   13   15
    -Every rational number can be expressed as an Egyptian Fraction. In fact, every rational number can be expressed
        as an Egyptian Fraction in an infinite number of different ways. Thus, the first group of examples may not
        show the same values as your solution. 
    -use infusion/Fraction.js package
    -assume input will be rational number? Any need to validate input?
Algorithm:
    -Initalize an array to store the result
    -Initialize a variable that represents the sum of egyptian functions
    -Create for loop; set the start value to 1; it will represent the denominator. Within the loop:
        -Take the sum of the egyptial functions and add 1/denominator to it
            -If sum is now less than the result, add denominator to end of result array
            -If sum is = to the result, add denominator to end of result array & return result
            -If sum is more than the result, go to next iteration

************** Exercise 8B ************** 
Input: Array containing all the denominators that are part of an Egyptian Fraction representation of the number
Output: Rational number
Rules: 
    -A Rational Number is any number that can be represented as the result of the division between two integers,
     e.g., 1/3, 3/2, 22/7, etc. The number to the left is called the numerator, and the number to the right
     is called the denominator.
    -A Unit Fraction is a rational number where the numerator is 1.
    -An Egyptian Fraction is the sum of a series of distinct unit fractions (no two are the same), such as:
        1   1    1    1
        - + - + -- + --
        2   3   13   15
    -Every rational number can be expressed as an Egyptian Fraction. In fact, every rational number can be expressed
        as an Egyptian Fraction in an infinite number of different ways. Thus, the first group of examples may not
        show the same values as your solution.
    -use infusion/Fraction.js package
    -use the function in exercise 8A as part of the solution
Algorithm:
    -Initalize a results variable
    -Loop through the input array
        -convert each current value into a fraction and add to results variable
    -Return results variable
  
  
  